#!/usr/bin/env python

import argparse
import sys
import pyc_ast
import pyc_asm_list
from pyc_log import *
import os.path

def opt_parser():
	parser = argparse.ArgumentParser(description='compile python to x86 assembly.')
	parser.add_argument('file', nargs='?', type=argparse.FileType('r'), help='file to compile')
	parser.add_argument('-c', '--code', help='code to compile')
	parser.add_argument('-o', '--output', help='output file.')
	parser.add_argument('-v', '--verbose', action='store_true', help='print debug output.')

	return parser


class MissingOption(Exception):
	pass


def validate(options):
	if options.file == None and options.code == None:
		raise MissingOption('specify either file or code to compile')		


def run(options):
	#print options
	validate(options)

	if options.verbose == True:
		log_set_verbose()
	else:
		log_set_quiet()

	options.src_type = 'cmdline'
	options.src = options.code
	if options.src == None:
		options.src = options.file.read()
		options.src_type = 'file'

	if isinstance(options.src, basestring) != True:
		raise Exception('invalid src variable. type: %s' % (options.src.__class__.__name__) )

	log(options)
	#import parser only now because we want to know if
	#we are verbose or not first.
	import pyc_parser

	as_tree = pyc_parser.parse(options.src)
	log(repr(as_tree))
	log(pyc_ast.str(as_tree))

	ss_list = pyc_ast.to_ss_list(as_tree)
	log("se list: ")
	for ss in ss_list:
		log(repr(ss))

	asm_list = pyc_asm_list.from_ss_list(ss_list)

	insns = []
	insns.extend(asm_prefix())

	#if sym_tbl.stack > 0:
	#	insns.append("subl\t$%s, %%esp" % sym_tbl.stack)

	log("asm list:")
	for ins_list in asm_list:
		for ins in ins_list:
			log(repr(ins))
			insns.append(str(ins))

	insns.extend(asm_suffix())

	output(options, insns)

def asm_headers():
	return [
		".text",
		".globl  main",
		".type   main, @function",
		"main:"
	]


def asm_prefix():
	return [
		"pushl   %ebp",
		"movl    %esp, %ebp"
	]

def asm_suffix():
	return [
		"movl    $0, %eax",
		"leave",
		"ret"
	]


def output(options, insns):
	if options.src_type == 'cmdline' or options.output == '-':
		for hdr in asm_headers():
			print hdr
		for ins in insns:
			print "\t" + ins
	else:
		
		output_fname = "%s.s" % os.path.splitext(options.file.name)[0]
		ofile = open(output_fname, 'w')

		for hdr in asm_headers():
			ofile.write(hdr + "\n")
		
		for ins in insns:
			ofile.write("\t" + ins + "\n")

		ofile.close()
			
			
	

if __name__ == "__main__":
	opt_p = opt_parser()
	options = opt_p.parse_args()

	try:
		run(options)
	except MissingOption as e:
		print e
		print
		opt_p.print_help()
		exit(-1)

